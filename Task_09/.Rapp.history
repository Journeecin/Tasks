outPhy<-ape:::c.phylo(outPhy,read.tree(text=stats$trees[[locus]][n]))
}
for(locus in 1:Nloci)
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees){
if(locus==1&&n==1){
outPhy<-read.tree(text=stats$tree[[locus]][n])
}
else{
outPhy<-ape:::c.phylo(outPhy,read.tree(text=stats$trees[[locus
]][n]))
}
for(locus in 1:Nloci)
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees){
if(locus==1&&n==1){
outPhy<-read.tree(text=stats$trees[[locus]][n])
}
else{
outPhy<-ape:::c.phylo(outPhy,read.tree(text=stats$trees[[locus
]][n]))
}
for(locus in 1:Nloci){
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees){
if(locus==1&&n==1){
outPhy<-read.tree(text=stats$trees[[locus]][n])
}
else{
outPhy<-ape:::c.phylo(outPhy,read.tree(text=stats$trees[[locus]][n]))
}
par(mfrow=c(1,1))
densityTree(outPhy)
model3<-coal_model(10,50)+
feat_mutation(par_prior("theta",sample.int(100,1)))+
sumstat_nucleotide_div()
stats<-simulate(model3,nsim=40)
mean_pi<-sapply(stats,function(x)mean(x$pi))
theta<-sapply(stats,function(x)x$pars[["theta"]])
install.packages("learnPopGen")
library(learnPopGen)
install.packages("coala")
library(coala)
install.packages("phytools")
library(phytools)
model<-coal_model(sample_size=5,loci_number=10,loci_length=500,ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
stats<-simulate(model,nsim=1)
Diversity<-stats$pi
Nloci<-length(stats$trees)
t1<-read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Agel<-max(nodeHeights(t1))
t2<-read.tree(text=stats$trees[[2]][1])
plot(t2)
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1,t2)
t1_1<-read.tree(text=stats$trees[[1]][1])
t1_2<-read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1,t1_2)
for(locus in 1:Nloci){
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees){
if(locus==1&&n==1){
outPhy<-read.tree(text=stats$trees[[locus]][n])
}
else{
outPhy<-ape:::c.phylo(outPhy,read.tree(text=stats$trees[[locus]][n]))
}
par(mfrow=c(1,1))
densityTree(outPhy)
model3<-coal_model(10,50)+
feat_mutation(par_prior("theta",sample.int(100,1)))+
sumstat_nucleotide_div()
stats<-simulate(model3,nsim=40)
mean_pi<-sapply(stats,function(x)mean(x$pi))
theta<-sapply(stats,function(x)x$pars[["theta"]])
plot(t1)
axisPhylo()
Agel<-max(nodeHeights(t1))
t2<-read.tree(text=stats$trees[[2]][1])
install.packages("learnPopGen")
library(learnPopGen)
install.packages("coala")
library(coala)
install.packages("phytools")
library(phytools)
model<-coal_model(sample_size=5,loci_number=10,loci_length=500,ploidy=2)+
feat_mutation(10)+
feat_recombination(10)+
sumstat_trees()+
sumstat_nucleotide_div()
stats<-simulate(model,nsim=1)
Diversity<-stats$pi
Nloci<-length(stats$trees)
t1<-read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Agel<-max(nodeHeights(t1))
t2<-read.tree(text=stats$trees[[2]][1])
plot(t2)
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1,t2)
t1_1<-read.tree(text=stats$trees[[1]][1])
t1_2<-read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1,t1_2)
~/Desktop/Evolution/Evolution/Tasks/Project/BRAINSZE to IQ.xlsx
source("http://jonsmitchell.com/code/reformatData07.R")
souce("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(0,1))
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
source("/Users/journeewheeler/Desktop/Evolution/Evolution/Tasks/Task_07/Untitled.R")
source("http://jonsmitchell.com/code/simFxn.R")
source("http://jonsmitchell.com/code/reformatData07.R")
Source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(0,1))
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(0,1))
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
rescaleFreq<-apply(overallFreq[,3:ncol(overallFreq)],2,function(x)x-x[1])
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
rescaleFreq<-apply(overallFreq[,3:ncol(overallFreq)],2,function(x)x-x[1])
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(-0.25,0.25))
s<-apply(rescaleFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
dYear<-c()
dAlleles<-c()
for(i in 3:ncol(overallFreq)){
dYear<-c(dYear,overallFreq[,1])
Vec<-overallFreq[,i]
Init<-overallFreq[1,i]
dAlleles<-c(dAlleles,Vec-Init)
}
smoothScatter(dYear,dAlleles,colramp=Pal,nbin=100)
smoothScatter(dYear dAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
smoothScatter(dYeardAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
smoothScatter(dYeard Alleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(0,1))
s<-apply(overallFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
rescaleFreq<-apply(overallFreq[,3:ncol(overallFreq)],2,function(x)x-x[1])
plot(1,1,type="n",xlim=c(1998,2013),ylim=c(-0.25,0.25))
s<-apply(rescaleFreq,2,function(x)lines(overallFreq[,1],x,col=rgb(0,0,0,0.01)))
dYear<-c()
dAlleles<-c()
for(i in 3:ncol(overallFreq)){
dYear<-c(dYear,overallFreq[,1])
Vec<-overallFreq[,i]
Init<-overallFreq[1,i]
dAlleles<-c(dAlleles,Vec-Init)
}
smoothScatter(dYear,dAlleles,colramp=Pal,nbin=100)
smoothScatter(dYeard Alleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
smoothScatter(dYeard dAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
smoothScatter(dYear dAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
smoothScatter(dYear,dAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
AddFit(nruns=50,n=100,ngens=18,startT=1997,simCol="gray40",rescale=TRUE)
addFit(nruns=50,n=100,ngens=18,startT=1997,simCol="gray40",rescale=TRUE)
addFit(nruns=10,n=1000,ngens=18,h=2,s=0,startT=1997,simCol="gray40",rescale=TRUE)
smoothScatter(dYear,dAlleles,colramp=Pal,nbin=100,xlab="year",ylab="change in allele freq. since 1998")
addFit(nruns=10,n=1000,ngens=18,h=2,s=0,startT=1997,simCol="gray40",rescale=TRUE)
plot(alleleFreqs$d_freq,alleleFreqs$d_imm,xlim=c(-0.15,0.15),xlab="overall freq. change",ylab="freq. change in subset")
points(alleleFreqs$d_freq,alleleFreqs$d_birth,col='blue')
points(alleleFreqs$d_freq,alleleFreqs$d_surv,col='red')
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phytools")
"library(phytools)"
install.packages("ape")
"library(ape)"
text.string<-
"(((((((cow,pig),whale),(bat,(lemur,human))),(robin,iguana)),coelacanth
),(gold_fish,trout)),shark);"
vert.tree<-read.tree(text=text.string)
setwd("~/Desktop/Evolution/Evolution/Tasks/Task_09")
library("phytools")
trees<-list()
births<-c()
Fractions<-c()
for(i in 1:100){
x<-sample(1:100,1,replace=FALSE)
y<-sample(1:100,1,replace=FALSE)
births[i]=x
Fractions[i]=y
trees[[i]]<-pbtree(b=births[i],d=(births[i]*Fractions[i]),n=100)
}
library(ape)
library(geiger)
plot(trees[[i]],show.tip.label=FALSE)
ltt.plot(trees[[i]],log="y")
bd.ms(phy=trees[[i]]$phy,time=100,n=100)
log(trees[[i]]$edge.length)
bd.km(trees[[i]],n=100)
for(i in 1:length(trees[[i]])){
branchLength<-mean(trees[[i]]$edge.length)
}
print(branchLength)
plotTree(trees[[i]],fsize=1.5,ftype="i",lwd=1.5,bty=1.5)
cor(1:2,1:2)
trees[[i]]
Tree<-trees[[branchLength]]
plot(Tree,type='b')
Tree<-trees[[branchLength]]
plot(Tree, type= 'b')
plot(Tree, type= "b")
trees[[i]]
Tree<-trees[[branchLength]]
rates<-c()
traits<-list()
Tree<-trees[[branchLength]]
plot(Tree)
rates<-c()
traits<-list()
for (1 in 1:100){
for (i in 1:100){
rates[i]<-sample(1:100),1,replace=FALSE)
rates[i]<-sample(1:100,1,replace=FALSE)
traits[[i]]<-fastBM(Tree,sig2=rates[i])
print(rates[i])
print(traits[[i]])
}
}
print(traits[[i]])
traitsMean<-mean(traits[[i]])
traitsMean
ratesMean<-mean(rates[i])
cor(traitsMean,ratesMean)
plot(traitsMean,ratesMean)
a<-var(traits[[i]])
b<-var(rates[i])
cor(a,b)
traitMat<-cbind(traits[[1]], traits[[4]])
cor(traitMat)
